{"version":3,"sources":["Timer.tsx","App.tsx","index.tsx"],"names":["Timer","props","state","time","tick","bind","start","end","this","setState","interval","setInterval","clearInterval","undefined","newTime","duration","className","style","backgroundColor","progress","onClick","text","timeLeft","seconds","date","Date","setSeconds","toISOString","substr","Math","floor","React","Component","App","clearChannels","chList","ch","Object","entries","map","chNum","key","uuid","drawChannels","ReactDOM","render","document","getElementById"],"mappings":"yPAaMA,G,wDACF,WAAYC,GAAqB,IAAD,8BAC5B,cAAMA,IAEDC,MAAQ,CACTC,KAAM,GAGV,EAAKC,KAAO,EAAKA,KAAKC,KAAV,gBACZ,EAAKC,MAAQ,EAAKA,MAAMD,KAAX,gBACb,EAAKE,IAAM,EAAKA,IAAIF,KAAT,gBATiB,E,mEAa5BG,KAAKD,Q,8BAILC,KAAKD,MACLC,KAAKC,SAAS,CAAEN,KAAM,EAAGO,SAAUC,YAAYH,KAAKJ,KAAM,S,4BAItDI,KAAKN,MAAMQ,UAAUE,cAAcJ,KAAKN,MAAMQ,UAClDF,KAAKC,SAAS,CAAEC,cAAUG,M,6BAI1B,IAAIC,EAAkBN,KAAKN,MAAMC,KAAO,EACpCW,GAAWN,KAAKP,MAAMc,WACtBD,EAAU,EACVN,KAAKD,OAGTC,KAAKC,SAAS,CAAEN,KAAMW,M,+BAeI,IAAD,OACzB,OACI,yBACIE,UAAU,gBACVC,MAAO,CAAEC,gBAAiBV,KAAKW,SAAW,GAAK,UAAYX,KAAKW,SAAW,GAAK,UAAYX,KAAKW,SAAW,GAAK,UAAY,WAC7HC,QAAS,WAAQ,EAAKd,UAEtB,yBAAKU,UAAU,eACVR,KAAKP,MAAMoB,MAEhB,yBAAKL,UAAU,eACVR,KAAKc,a,+BAtBlB,IAAIC,EAAkBf,KAAKN,MAAMQ,SAAWF,KAAKP,MAAMc,SAAWP,KAAKN,MAAMC,KAAO,EAChFqB,EAAO,IAAIC,KAAK,GAEpB,OADAD,EAAKE,WAAWH,GACTC,EAAKG,cAAcC,OAAO,GAAI,K,+BAIrC,OAA4B,IAAxBpB,KAAKP,MAAMc,UAAmBP,KAAKN,MAAMQ,SACtCmB,KAAKC,MAAM,IAAMtB,KAAKN,MAAMC,KAAOK,KAAKP,MAAMc,UADS,Q,GA7ClDgB,IAAMC,YCJpBC,G,wDACJ,WAAYhC,GAAY,IAAD,8BACrB,cAAMA,IAEDC,MAAQ,GAHQ,E,gEAOrBM,KAAK0B,kB,sCAML,IAFA,IAAIC,EAAoB,GAEfC,EAAa,EAAGA,EAAK,GAAIA,IAChCD,EAAO,MAAD,OAAOC,EAAK,IAAO,IAG3B5B,KAAKC,SAAS0B,K,qCAId,OACEE,OAAOC,QAAQ9B,KAAKN,OAAOqC,KAAI,YAAsC,IAAD,mBAAnCC,EAAmC,KAA5BrC,EAA4B,KAClE,OACE,kBAAC,EAAD,CACEsC,IAAKC,cACL3B,SAAUZ,EACVkB,KAAMmB,S,+BAQd,OACE,yBAAKxB,UAAU,eACZR,KAAKmC,oB,GAtCIX,cCLlBY,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.81173cad.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\ninterface ITimerProps {\r\n    duration: number;\r\n    text: string;\r\n}\r\n\r\ninterface ITimerState {\r\n    time: number;\r\n    interval?: NodeJS.Timeout;\r\n};\r\n\r\nclass Timer extends React.Component<ITimerProps, ITimerState> {\r\n    constructor(props: ITimerProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            time: 0\r\n        };\r\n\r\n        this.tick = this.tick.bind(this);\r\n        this.start = this.start.bind(this);\r\n        this.end = this.end.bind(this);\r\n    }\r\n\r\n    componentWillUnmount(): void {\r\n        this.end();\r\n    }\r\n\r\n    private start(): void {\r\n        this.end();\r\n        this.setState({ time: 0, interval: setInterval(this.tick, 1000) });\r\n    }\r\n\r\n    private end(): void {\r\n        if (this.state.interval) clearInterval(this.state.interval);\r\n        this.setState({ interval: undefined });\r\n    }\r\n\r\n    private tick(): void {\r\n        let newTime: number = this.state.time + 1;\r\n        if (newTime >= this.props.duration) {\r\n            newTime = 0;\r\n            this.end();\r\n        }\r\n\r\n        this.setState({ time: newTime });\r\n    }\r\n\r\n    private get timeLeft(): string {\r\n        let seconds: number = this.state.interval ? this.props.duration - this.state.time : 0\r\n        let date = new Date(0);\r\n        date.setSeconds(seconds);\r\n        return date.toISOString().substr(14, 5);\r\n    }\r\n\r\n    private get progress(): number {\r\n        if (this.props.duration === 0 || !this.state.interval) return 100;\r\n        return Math.floor(100 * this.state.time / this.props.duration)\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <div\r\n                className=\"channelButton\"\r\n                style={{ backgroundColor: this.progress < 33 ? \"#FF7676\" : this.progress < 66 ? \"#FFFF66\" : this.progress < 90 ? \"#9dffb0\" : \"#ADD8E6\" }}\r\n                onClick={() => { this.start() }}\r\n            >\r\n                <div className=\"channelText\">\r\n                    {this.props.text}\r\n                </div>\r\n                <div className=\"channelTime\">\r\n                    {this.timeLeft}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport { Timer };","import React, { Component } from \"react\";\nimport { v4 as uuid } from \"uuid\";\nimport { Timer } from \"./Timer\";\nimport \"./App.css\";\n\ninterface IAppState {\n  [ch: string]: number;\n};\n\nclass App extends Component<{}, IAppState> {\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {};\n  }\n\n  public componentDidMount(): void {\n    this.clearChannels();\n  }\n\n  private clearChannels(): void {\n    let chList: IAppState = {};\n\n    for (let ch: number = 0; ch < 30; ch++) {\n      chList[`CH ${ch + 1}`] = 300;\n    }\n\n    this.setState(chList);\n  }\n\n  private drawChannels(): JSX.Element[] {\n    return (\n      Object.entries(this.state).map(([chNum, time]: [string, number]) => {\n        return (\n          <Timer\n            key={uuid()}\n            duration={time}\n            text={chNum}\n          />\n        );\n      })\n    )\n  }\n\n  public render(): JSX.Element {\n    return (\n      <div className=\"channelList\">\n        {this.drawChannels()}\n      </div>\n    );\n  }\n}\n\nexport { App };","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}